push()
pop()
shift()
unshift()
splice()
sort()
reverse()

wss://echo.websocket.org


curl -H "Origin: http://exlocalhost:8000"  -H "Access-Control-Request-Method: POSONS --verbose   https://app.wtctrl.com

yarn add core-js

{"name":"msgfetchbydays", "id":"somerandom", "days":20, "status":0, "desc":true}
{"name":"subscr", "status":0, "umspk":"user#1gKk4ltY2UuMc9poYZaCPFArCLY", "id":"foo"}
1ggrWyJEYGJQY0Zn5rNdt0U409J

curl \
    --header "Ocp-Apim-Subscription-Key: ${SPEECHSDK_SPEECH_KEY}" \
    --header "Content-type: audio/wav; codecs=audio/pcm; samplerate=16000" \
    -X POST \
    --data-binary @whatstheweatherlike.wav \
   "https://${SPEECHSDK_SPEECH_REGION}.stt.speech.microsoft.com/speech/recognition/conversation/cognitiveservices/v1?language=en-US" -v


dynamo = boto3.resource('dynamodb',endpoint_url='http://localhost:8000', region_name='us-west-2')
table = dynamo.Table('MainTest')
table.scan()


func putInSQS(text string) error {

    queue_url := os.Getenv("QUEUE_URL")
    if queue_url == "" {
        return errors.New("QUEUE_URL env var is not set")
    }

    sess := session.Must(session.NewSession())
    svc := sqs.New(sess)
    send_input := &sqs.SendMessageInput{
        MessageGroupId: aws.String("tgwebhook"),
        MessageBody:    aws.String(text),
        QueueUrl:       aws.String(queue_url),
    }
    _, err := svc.SendMessage(send_input)
    if err != nil {
        return err
    }
    return nil
}


function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

